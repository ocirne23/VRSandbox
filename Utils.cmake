function(set_global prop val)
    set_property(GLOBAL PROPERTY ${prop} ${val})
endfunction()

function(get_global prop val)
    get_property(tmp GLOBAL PROPERTY ${prop})
    set(${val} ${tmp} PARENT_SCOPE)
endfunction()

function(append_global list_prop val)
    get_global(${list_prop} tmp)
    list(APPEND tmp ${val})
    set_global(${list_prop} "${tmp}")
endfunction()

function(group_sources_by_folder target)
    get_target_property(file_list ${target} SOURCES)
    set(last_dir "")
    foreach(file ${file_list})
        file(RELATIVE_PATH relative_file "${PROJECT_SOURCE_DIR}" ${file})
        get_filename_component(dir "${relative_file}" PATH)
        if (NOT "${dir}" STREQUAL "${last_dir}")
            if (files)
                source_group("${last_dir}" FILES ${files})
            endif (files)
            set(files "")
        endif (NOT "${dir}" STREQUAL "${last_dir}")
        set(files ${files} ${file})
        set(last_dir "${dir}")
    endforeach()
    if (files)
        source_group("${last_dir}" FILES ${files})
    endif (files)
endfunction()

function(apply_compile_settings target)
	get_target_property(type ${target} TYPE)
	if (${type} STREQUAL "SHARED_LIBRARY")
		target_compile_definitions(${target} PRIVATE   ${target}_EXPORTS)
		target_compile_definitions(${target} INTERFACE ${target}_IMPORTS)
	endif()

    set_target_properties(${PROJECT_NAME} PROPERTIES VS_GLOBAL_PublicModuleDirectories "${CMAKE_CURRENT_LIST_DIR}/Public")
    set_target_properties(${PROJECT_NAME} PROPERTIES VS_GLOBAL_AllProjectBMIsArePublic "false")

    target_link_directories(${PROJECT_NAME} PRIVATE "${CMAKE_SOURCE_DIR}/Dependencies/Lib/")
    target_include_directories(${PROJECT_NAME} PRIVATE "${CMAKE_SOURCE_DIR}/Dependencies/Include/")

	target_compile_options(${target} PRIVATE ${COMPILE_OPTIONS})
	target_link_options(${target} PRIVATE ${LINK_OPTIONS})

    group_sources_by_folder(${target})

endfunction()

function(print_target_properties tgt)
	execute_process(COMMAND cmake --help-property-list OUTPUT_VARIABLE CMAKE_PROPERTY_LIST)
	STRING(REGEX REPLACE ";" "\\\\;" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
	STRING(REGEX REPLACE "\n" ";" CMAKE_PROPERTY_LIST "${CMAKE_PROPERTY_LIST}")
	list(FILTER CMAKE_PROPERTY_LIST EXCLUDE REGEX "^LOCATION$|^LOCATION_|_LOCATION$")
	list(REMOVE_DUPLICATES CMAKE_PROPERTY_LIST)
	unset(CMAKE_WHITELISTED_PROPERTY_LIST)
	foreach(prop ${CMAKE_PROPERTY_LIST})
		if(prop MATCHES "^(INTERFACE|[_a-z]|IMPORTED_LIBNAME_|MAP_IMPORTED_CONFIG_)|^(COMPATIBLE_INTERFACE_(BOOL|NUMBER_MAX|NUMBER_MIN|STRING)|EXPORT_NAME|IMPORTED(_GLOBAL|_CONFIGURATIONS|_LIBNAME)?|NAME|TYPE|NO_SYSTEM_FROM_IMPORTED)$")
			list(APPEND CMAKE_WHITELISTED_PROPERTY_LIST ${prop})
		endif()
	endforeach(prop)
    if(NOT TARGET ${tgt})
      message("There is no target named '${tgt}'")
      return()
    endif()
    get_target_property(target_type ${tgt} TYPE)
    if(target_type STREQUAL "INTERFACE_LIBRARY")
        set(PROP_LIST ${CMAKE_WHITELISTED_PROPERTY_LIST})
    else()
        set(PROP_LIST ${CMAKE_PROPERTY_LIST})
    endif()
    foreach (prop ${PROP_LIST})
        string(REPLACE "<CONFIG>" "${CMAKE_BUILD_TYPE}" prop ${prop})
        get_property(propval TARGET ${tgt} PROPERTY ${prop} SET)
        if (propval)
            get_target_property(propval ${tgt} ${prop})
            message ("${tgt} ${prop} = ${propval}")
        endif()
    endforeach(prop)
endfunction()